name: Build and Release Plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.6.5.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install jprm
      run: |
        python3 -m pip install --upgrade pip
        pip install jprm

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Update version in files
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"

        # Update Directory.Build.props
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" Directory.Build.props
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION<\/AssemblyVersion>/" Directory.Build.props
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION<\/FileVersion>/" Directory.Build.props

        # Update build.yaml
        sed -i "s/version: .*/version: \"$VERSION\"/" build.yaml

    - name: Build plugin
      run: |
        dotnet build --configuration Release

    - name: Create plugin package
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        ARTIFACT_DIR="./artifacts"
        mkdir -p "$ARTIFACT_DIR"

        # Build with jprm
        zipfile=$(jprm plugin build . --output="$ARTIFACT_DIR" --version="$VERSION")
        echo "PLUGIN_ZIP=$zipfile" >> $GITHUB_ENV

        # Package templates
        cd "$ARTIFACT_DIR"
        TEMPLATE_ZIP="newsletters_${VERSION}_templates.zip"
        zip -r "$TEMPLATE_ZIP" ../Jellyfin.Plugin.Newsletters/Templates/
        echo "TEMPLATE_ZIP=$ARTIFACT_DIR/$TEMPLATE_ZIP" >> $GITHUB_ENV

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"

        # Extract changelog for this version from CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          # Get the changelog section for this version
          CHANGELOG=$(awk "/^# $VERSION/,/^# [0-9]/ { if (/^# [0-9]/ && !/^# $VERSION/) exit; if (!/^# $VERSION/) print }" CHANGELOG.md | sed '/^$/d')

          if [ -z "$CHANGELOG" ]; then
            # If no specific version found, use a generic message
            CHANGELOG="Release version $VERSION"
          fi
        else
          CHANGELOG="Release version $VERSION"
        fi

        # Save changelog to file for use in release
        echo "$CHANGELOG" > changelog.txt
        echo "CHANGELOG_FILE=changelog.txt" >> $GITHUB_OUTPUT

    # - name: Update manifest.json
    #   run: |
    #     VERSION="${{ steps.version.outputs.VERSION }}"
    #     PLUGIN_ZIP_NAME=$(basename "$PLUGIN_ZIP")
    #     CHECKSUM=$(md5sum "$PLUGIN_ZIP" | cut -d' ' -f1)
    #     TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    #     # Read changelog
    #     CHANGELOG_TEXT=$(cat changelog.txt | sed 's/"/\\"/g' | tr '\n' ' ')

    #     # Create new version entry
    #     NEW_VERSION=$(cat << EOF
    #     {
    #         "version": "$VERSION",
    #         "changelog": "$CHANGELOG_TEXT",
    #         "targetAbi": "10.9.0.0",
    #         "sourceUrl": "https://github.com/Cloud9Developer/Jellyfin-Newsletter-Plugin/releases/download/v$VERSION/$PLUGIN_ZIP_NAME",
    #         "checksum": "$CHECKSUM",
    #         "timestamp": "$TIMESTAMP"
    #     }
    #     EOF
    #     )

    #     # Update manifest.json by adding new version to the beginning of versions array
    #     python3 << 'EOF'
    #     import json
    #     import os

    #     version = os.environ['VERSION']
    #     plugin_zip_name = os.path.basename(os.environ['PLUGIN_ZIP'])
    #     checksum = os.environ['CHECKSUM']
    #     timestamp = os.environ['TIMESTAMP']

    #     with open('changelog.txt', 'r') as f:
    #         changelog = f.read().strip()

    #     # Load existing manifest
    #     with open('manifest.json', 'r') as f:
    #         manifest = json.load(f)

    #     # Create new version entry
    #     new_version = {
    #         "version": version,
    #         "changelog": changelog,
    #         "targetAbi": "10.9.0.0",
    #         "sourceUrl": f"https://github.com/Cloud9Developer/Jellyfin-Newsletter-Plugin/releases/download/v{version}/{plugin_zip_name}",
    #         "checksum": checksum,
    #         "timestamp": timestamp
    #     }

    #     # Add new version to the beginning of versions array
    #     manifest[0]["versions"].insert(0, new_version)

    #     # Write updated manifest
    #     with open('manifest.json', 'w') as f:
    #         json.dump(manifest, f, indent=4)
    #     EOF

    #     echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Release v${{ steps.version.outputs.VERSION }}
        body_path: ${{ steps.changelog.outputs.CHANGELOG_FILE }}
        files: |
          ${{ env.PLUGIN_ZIP }}
          ${{ env.TEMPLATE_ZIP }}
          manifest.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit updated manifest
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add manifest.json
        git commit -m "Update manifest.json for release v${{ steps.version.outputs.VERSION }}" || exit 0
        git push origin HEAD:master || echo "Failed to push manifest update"